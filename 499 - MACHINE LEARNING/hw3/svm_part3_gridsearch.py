# -*- coding: utf-8 -*-
"""svm_part3_GridSearch

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JOXa-69jAD6SxgaXzVNpllFeIOi4_7c5
"""

#Loading data on Google Colab:
#!wget user.ceng.metu.edu.tr/~artun/ceng499/hw3_files.zip
#!unzip hw3_files.zip

import numpy as np
train_data = np.load ( "/content/hw3/hw3_data/catdog/train_data.npy" )
train_labels = np.load ( "/content/hw3/hw3_data/catdog/train_labels.npy"  )
test_data = np.load (  "/content/hw3/hw3_data/catdog/test_data.npy"  )
test_labels = np.load (  "/content/hw3/hw3_data/catdog/test_labels.npy")
print(len(train_data))

from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
from sklearn.svm import SVC

from sklearn.utils import shuffle
#shuffle the data
train_data,train_labels= shuffle(train_data,train_labels) 
from sklearn import preprocessing
#normalize the data
train_data = preprocessing.normalize(train_data,norm='l2')
test_data = preprocessing.normalize(test_data,norm='l2') 
#train_data=train_data / 255
#test_data= test_data / 255
tuned_parameters =[{'kernel': ['sigmoid'], 'gamma': [0.00001], 'C': [ 100]}]

# I use below parameters one by one since it takes a lot of time to receive the results
# [{'kernel': ['rbf'], 'gamma': [0.00001, 0.0001, 0.001, 0.01, 0.1, 1],'C': [0.01, 0.1, 1, 10, 100]}]
#[{'kernel': ['linear'], 'C': [0.01, 0.1, 1, 10, 100]}]
#[{'kernel': ['poly'], 'gamma': [0.00001, 0.0001, 0.001, 0.01, 0.1, 1], 'C': [0.01, 0.1, 1, 10, 100]}]
#[{'kernel': ['sigmoid'], 'gamma': [0.00001, 0.0001, 0.001, 0.01, 0.1, 1], 'C': [0.01, 0.1, 1, 10, 100]}]


clf = GridSearchCV( SVC(), tuned_parameters, scoring="accuracy")



clf.fit(train_data, train_labels)

print("Here is the best parameters on training:", clf.best_params_)

print("Grid search results:")


means = clf.cv_results_['mean_test_score']

for mean,  params in zip(means,  clf.cv_results_['params']):
  print("%0.6f (+/-%0.06f)", (mean,  params))